/** Simple Example
*
* Copyright 2008 Peter Vennemann
* 
* This file is part of JPIV.
*
* JPIV is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* JPIV is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with JPIV.  If not, see <http://www.gnu.org/licenses/>. 
*
* This script serves as a simple introduction to the 
* scripting capabilities of JPIV.
*
* This example demonstrates how to:
* - configure a graphical dialog to interact with the user
* - get variables from this dialog
* - get handles to running program components
* If you put a file into the ./jlib/jsc/ directory (like this file), a link 
* to that file will be displayed as a menu item in the 'Script' drop down menu
* of the main jpiv frame (restart jpiv to update the links).
*/

// declare your variables (variable type, variable name)
// jpiv2.ScriptDlg is a preconfigured user dialog class
jpiv2.ScriptDlg myDlg;

// initialize the user dialog
public initDlg() {
	// Use the jpiv2.ScriptDlg class to create a dialog for user input.
	// The first parameter is the parent frame, the second the title of this 
	// script and the third one the name of the author. 
	// (Strictly speaking, you do not know the name of the parent component, because
	// you did not create it. To keep things simple, the command interpreter holds a
	// reference to the parent component. This reference is called 'jpiv' per definition.
	// The type of 'jpiv' is java2.JPiv. This class provides some get...() methods to 
	// get references to other program components. This is particularly useful to access
	// virtually all variables and methods of the running program. Examples are given 
	// further below.)
	myDlg = new jpiv2.ScriptDlg(
		jpiv,
		"Simple Example",
		"mail@vennemann-online.de");	
	// Use the set...() methods of the jpiv2.ScriptDlg class to add some information that 
	// will be displayed in the dialog. (Use '+' to concatenate strings.)
	myDlg.setDate("February 2005");
	myDlg.setOs("independent");
	myDlg.setDependencies("none");
	myDlg.setComment(
		"Read the commented code of this script to get an introduction to the " +
		"scripting capabilities of jpiv. Press 'execute' to print the location " + 
		"of the directory that contains this file in the 'Cmd' window below'.<br> " +
		"Have a look at the other scripts in this directory to see more advanced examples.");
	// Add your specific variable names, default values and descriptions.
	// The values of this variables can later be manipulated in the dialog.
	myDlg.addVariable("loop", "5", "Number of times to loop through this script.");
}

// The main work is done in this part of the script. Adapt this method to your own demands.
public void simpleExample() {
	// use the method above to initialize your dialog
	initDlg();
	// The method 'display' will make the dialog visible.
	// This method returns an integer constant, that indicates whether the user would 
	// like to proceed or not. The constant EXECUTE_OPTION is defined in the
	// jpiv2.ScriptDlg class.
	int proceed = myDlg.display();	
	// The user pressed 'execute'.
	if (proceed == myDlg.EXECUTE_OPTION) {
		// Use the get...() methods of your jpiv2.ScriptDlg to get the actual 
		// variable values.
		int loop = myDlg.getAsInt("loop");
		// Assemble the path to the jpiv script library.
		// The class jpiv2.FileHandling provides some static methods
		// to get the directory name of the jpiv library and the
		// operating system dependent fileSeparator ('/' or '\').
		String fileSep = jpiv2.FileHandling.getFileSeparator();
		String jpivLib = 
			jpiv2.FileHandling.getJarDir() + fileSep + 
			"jlib" + fileSep + 
			"jsc" + fileSep;
		for(int i = 0; i < loop; i++) {
			System.out.println(i + " - " + "You find this script in: " + jpivLib);
		}
	// The user pressed 'quit'.
	} else {
		System.out.println("cancelled");
	}
}

// finally you can call your method
simpleExample();
// free memory
jpiv.getCmdInterpreter().clearBshNamespace();

